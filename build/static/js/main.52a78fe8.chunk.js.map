{"version":3,"sources":["ChatHeader.js","Message.js","features/appSlice.js","features/userSlice.js","firebase.js","Chat.js","SideBarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","str","channelName","className","style","textOverflow","length","substring","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","disabled","onChange","e","target","onClick","preventDefault","trim","add","FieldValue","serverTimestamp","alert","type","SideBarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","openModal","setOpenModal","setChannelName","channel","signOut","uid","open","onClose","text","console","log","Login","alt","Button","signInWithPopup","catch","error","App","dispach","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52a78fe8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ChatHeader.css\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\n\r\nfunction truncate(str) {\r\n  return str?.length > 70 ? str?.substring(0, 70) + \"...\" : str;\r\n}\r\n\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"chatHeader\">\r\n      <div className=\"chatHeader__left\">\r\n        <h3>\r\n          <span className=\"chatHeader__hash\">#</span>\r\n          <span style={{ textOverflow: \"ellipsis\" }}>\r\n            {truncate(channelName)}\r\n          </span>\r\n          {/* {channelName}     */}\r\n        </h3>\r\n      </div>\r\n      <div className=\"chatHeader__right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n\r\n        <div className=\"chatHeader__search\">\r\n          <input placeholder=\"Search\" />\r\n          <SearchRoundedIcon />\r\n        </div>\r\n        <SendRoundedIcon />\r\n        <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nfunction Message({timestamp,user,message}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className=\"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n                <p className='msg'>\r\n                    {message}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        channelId:null,\r\n        channelName:null\r\n    },\r\n    reducers: {\r\n        setChannelInfo: (state, action) => {\r\n            state.channelId = action.payload.channelId;\r\n            state.channelName = action.payload.channelName;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state,action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null ;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {login , logout} = userSlice.actions;\r\n\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDYIPoI-ByCn9XDiqi73RQt9E3iQMKraAA\",\r\n    authDomain: \"my-discord-54eb7.firebaseapp.com\",\r\n    databaseURL: \"https://my-discord-54eb7.firebaseio.com\",\r\n    projectId: \"my-discord-54eb7\",\r\n    storageBucket: \"my-discord-54eb7.appspot.com\",\r\n    messagingSenderId: \"77945904371\",\r\n    appId: \"1:77945904371:web:c9532b6b117b294baceb86\",\r\n    measurementId: \"G-J4V4LTHTQL\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db  = firebaseApp.firestore();\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useState, useEffect } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const channelId = useSelector(selectChannelId);\r\n  const user = useSelector(selectUser);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [channelId]);\r\n\r\n  const sendMessages = (e) => {\r\n    e.preventDefault();\r\n    if (input.trim().length > 0) {\r\n      db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        message: input,\r\n        user: user,\r\n      });\r\n\r\n      setInput(\"\");\r\n    } else {\r\n      alert(\"Please enter a message\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n\r\n      <div className=\"chat__messages\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat__input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            disabled={!channelId}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={` Message #${channelName} `}\r\n          />\r\n          <button\r\n            onClick={sendMessages}\r\n            className=\"chat__inputButton\"\r\n            type=\"submit\"\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon fontSize=\"large\" />\r\n          <GifIcon fontSize=\"large\" />\r\n          <EmojiEmotionsIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\nimport \"./SideBarChannel.css\";\r\n// import Truncate from \"react-truncate\";\r\n\r\nfunction truncate(str) {\r\n  return str?.length > 25 ? str?.substring(0, 25) + \"...\" : str;\r\n}\r\n\r\nfunction SideBarChannel({ id, channelName }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div\r\n      className=\"sidebarChannel channel__name\"\r\n      onClick={() =>\r\n        dispatch(\r\n          setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n          })\r\n        )\r\n      }\r\n    >\r\n      <h4>\r\n        <div>\r\n          <span className=\"sidebarChannel__hash\">#</span>\r\n          <span style={{ textOverflow: \"ellipsis\" }}>\r\n            {truncate(channelName)}\r\n          </span>\r\n        </div>\r\n\r\n        {/* {channelName} */}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBarChannel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SideBarChannel from \"./SideBarChannel\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db, { auth } from \"./firebase\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\n\r\nconst styles = {\r\n  fontFamily: \"sans-serif\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [channels, setChannels] = useState([]);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [channelName, setChannelName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    db.collection(\"channels\").onSnapshot((snapshot) =>\r\n      setChannels(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          channel: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n    // console.log(channels)\r\n  }, []);\r\n  const openModalScreen = () => {\r\n    setOpenModal(true);\r\n  };\r\n  const addChannel = () => {\r\n    if (channelName) {\r\n      db.collection(\"channels\").add({\r\n        channelName: channelName,\r\n        admin: user.displayName,\r\n      });\r\n    }\r\n  };\r\n  const onCloseModal = () => {\r\n    setOpenModal(false);\r\n  };\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <h3>Techny Teams</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n      <div className=\"sidebar__channels\">\r\n        <div className=\"sidebar__channelsHeader\">\r\n          <div className=\"sidebar__header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channel</h4>\r\n          </div>\r\n          <AddIcon onClick={openModalScreen} className=\"sidebar__addChannel\" />\r\n        </div>\r\n        <div className=\"sidebar__channelsList\">\r\n          {channels.map(({ id, channel }) => (\r\n            <SideBarChannel\r\n              key={id}\r\n              id={id}\r\n              channelName={channel.channelName}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__voice\">\r\n        <SignalCellularAltIcon\r\n          className=\"sidebar__voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"sidebar__voiceInfo\">\r\n          <h3>Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n        <div className=\"sidebar__voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__profile\">\r\n        <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n        <div className=\"sidebar__profileInfo\">\r\n          <h3>{user.displayName}</h3>\r\n          <p>#{user.uid.substring(0, 5)}</p>\r\n        </div>\r\n        <div className=\"sidebar__profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n      <Modal open={openModal} onClose={onCloseModal}>\r\n        <input\r\n          onChange={(text) => {\r\n            setChannelName(text);\r\n            console.log(text);\r\n          }}\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          id=\"\"\r\n        />\r\n        <button onClick={openModal}> Add </button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react'\r\nimport './Login.css'\r\nimport {Button} from '@material-ui/core'\r\nimport { auth, provider } from './firebase'\r\nfunction Login() {\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .catch((error)=>alert(error.message))\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/en/thumb/9/98/Discord_logo.svg/2000px-Discord_logo.svg.png\" alt=\"Discord Logo\"/>\r\n\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport Chat from './Chat';\r\nimport Sidebar from './Sidebar';\r\nimport { selectUser } from './features/userSlice'\r\nimport Login from './Login';\r\nimport { auth } from './firebase'\r\nimport {login , logout} from './features/userSlice'\r\n\r\nfunction App() {\r\n  const dispach = useDispatch();\r\n  const user = useSelector(selectUser)\r\n  \r\n  useEffect(()=>{\r\n    auth.onAuthStateChanged((authUser)=> {\r\n      console.log(\"User is ---------->\" , authUser)\r\n      if (authUser) {\r\n        dispach(login({\r\n          uid:authUser.uid,\r\n          photo:authUser.photoURL,\r\n          email:authUser.email,\r\n          displayName: authUser.displayName\r\n        }))\r\n      }\r\n      else{\r\n        dispach(logout())\r\n      }\r\n    })\r\n  }, [dispach])\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n        <Sidebar/>\r\n        <Chat/>\r\n        </>\r\n      )  \r\n      : (\r\n        <Login/>\r\n      )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app:appReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}